%HEADER%

%AS-HEADER-LOC%

##now templates are checked out with a git clone 
		##destination path must be an existing empty directory
		os.mkdir(DB_DIR + exp_id + '/git')
		if (args.model_name == 'dummy'):# or args.template_name == 'dummy'):
			shutil.copytree("../templates", DB_DIR + exp_id + "/git/templates")
		else:
			print "Checking out templates and config files..."
			if args.template_branch is not 'master':
				(status, output) = getstatusoutput("git clone -b " + args.template_branch + " " + GIT_DIR + "/templates.git " + DB_DIR + exp_id + "/git/templates")
			else:
				(status, output) = getstatusoutput("git clone " + GIT_DIR + "/templates.git " + DB_DIR + exp_id + "/git/templates")
			
			autosubmit_version_filename = "../VERSION"
			template_version_filename = LOCAL_ROOT_DIR + "/" + exp_id + "/git/templates/VERSION"
			
			if not check_compatibility(autosubmit_version_filename, template_version_filename):
				print "Compatibility check FAILED!"
				print_compatibility()
				print "WARNING: running after FAILED compatibility check is at your own risk!!!"
			else:
				print "Compatibility check PASSED!"


			##now ocean diagnostics are checked out with a git clone 
			print "Checking out ocean diagnostics..."
			if args.ocean_diagnostics_branch is not 'master':
				(status, output) = getstatusoutput("git clone -b " + args.ocean_diagnostics_branch + " " + GIT_DIR + "/ocean_diagnostics.git " + DB_DIR + exp_id + "/git/ocean_diagnostics")
			else:
				(status, output) = getstatusoutput("git clone " + GIT_DIR + "/ocean_diagnostics.git " + DB_DIR + exp_id + "/git/ocean_diagnostics") 

			print "Checking out model sources..."
			#repo = Repo(GIT_DIR + "/" + args.model_name + ".git")
			#cloned_repo = repo.clone(DB_DIR + exp_id)
			#if args.model_branch:
			#	cloned_repo.checkout('head', b=args.model_branch) 
			if args.model_branch is not 'master':
				(status, output) = getstatusoutput("git clone -b " + args.model_branch + " " + GIT_DIR + "/" + args.model_name + ".git " + DB_DIR + exp_id + "/git/model")
			else:
				(status, output) = getstatusoutput("git clone " + GIT_DIR + "/" + args.model_name + ".git " + DB_DIR + exp_id + "/git/model")



	# merge expdef config and common and template config files
	## probably not needed if autosubmit read separate files (this would break backwards compatibility)
	## separate files would be useful to track versions per run ?

	content = file(DB_DIR + exp_id + "/conf/expdef_" + exp_id + ".conf").read()
	content += file(DB_DIR + exp_id + "/git/templates/common/common.conf").read()
	content += file(DB_DIR + exp_id + "/git/templates/" + args.template_name + "/" + args.template_name + ".conf").read()

# think in a way to do that for experiments which git directory had been cleaned ( git clone ? )
			dirs = os.listdir(DB_DIR + args.copy + "/git")
			if (dirs):
				print "Cloning previous experiment templates, ocean diagnostics and model sources..."
				# what to do with configs that are coming from new template ?
				for dirname in dirs:
					if os.path.isdir(DB_DIR + args.copy + "/git/" + dirname):
						if os.path.isdir(DB_DIR + args.copy + "/git/" + dirname + "/.git"):
							(status, output) = getstatusoutput("git clone " + DB_DIR + args.copy + "/git/" + dirname + " " + DB_DIR + exp_id + "/git/" + dirname)
						else:
							shutil.copytree(DB_DIR + args.copy + "/git/" + dirname, DB_DIR + exp_id + "/git/" + dirname)
			else:
				print "Checking out templates and config files..."
				(status, output) = getstatusoutput("git clone -b " + args.template_branch + " " + GIT_DIR + "/templates.git " + DB_DIR + exp_id + "/git/templates")		
				print "Checking out ocean diagnostics..."
				(status, output) = getstatusoutput("git clone -b " + args.ocean_diagnostics_branch + " " + GIT_DIR + "/ocean_diagnostics.git " + DB_DIR + exp_id + "/git/ocean_diagnostics")
				print "Checking out model sources..."
				(status, output) = getstatusoutput("git clone -b " + args.model_branch + " " + GIT_DIR + "/" + args.model_name + ".git " + DB_DIR + exp_id + "/git/model")
			
			autosubmit_version_filename = "../VERSION"
			template_version_filename = LOCAL_ROOT_DIR + "/" + exp_id + "/git/templates/VERSION"
			
			if not check_compatibility(autosubmit_version_filename, template_version_filename):
				print "Compatibility check FAILED!"
				print_compatibility()
				print "WARNING: running after FAILED compatibility check is at your own risk!!!"
			else:
				print "Compatibility check PASSED!"

			#shutil.copytree(DB_DIR+args.copy+"/git", DB_DIR + exp_id + "/git")

 	content = file("../conf/archdef/" + args.HPC + ".conf").read()
	content += file("../conf/archdef/common.conf").read()
	file(DB_DIR + exp_id + "/conf/archdef_" + exp_id + ".conf", 'w').write(content)

%AS-TAILER-LOC%
