%ENVIRONMENT%

set -exuv
date

#
# General Paths
#
SCRATCH_DIR=%SCRATCH_DIR%
ECEARTH_DIR=%MODELS_DIR%/ecearth
PATH=%GRIBAPIPATH2%:${PATH}
USER=%HPCUSER%

#
# Model Configuration
#
VERSION=%VERSION%
MEMBER=%MEMBER%
EXPID=%EXPID%
START_date=%SDATE%

case $VERSION in
     v3.1-r437) ECEARTH=${ECEARTH_DIR}/v3.1-r437
                ctrl_file_dir=${ECEARTH_DIR}/v3.1-r437/setup/ctrl
                ini_data_dir=${ECEARTH_DIR}/v3.1-r437/inidata
     ;;
     v3.1-r593) ECEARTH=${ECEARTH_DIR}/v3.1-r593
                ctrl_file_dir=${ECEARTH_DIR}/v3.1-r593/setup/ctrl
                ini_data_dir=${ECEARTH_DIR}/v3.1-r593/inidata
     ;;
esac

WRITINGDIR=${SCRATCH_DIR}/${USER}/${EXPID}
RUN_dir=${WRITINGDIR}/${START_date}/${MEMBER}
INIPATH=${RUN_dir}/inidata

mkdir -p $RUN_dir
cd $RUN_dir

#
# IFS
#
ifs_grid=%IFS_resolution%
ifs_numproc=%IFS_nproc%
ifs_exe_file=${ECEARTH}/bin/ifsmaster-eexcon
cpl_freq_hrs=%RUN_coupFreq%
nfrp=%NFRP%
ifs_time_step_sec=3600
ifs_output_freq=$(( nfrp * 3600 / ifs_time_step_sec ))
ifs_di_freq=$(( 1 * 3600 / ifs_time_step_sec ))
ifs_lastout=true

#
# NEMO 
#
nem_grid=%NEMO_resolution%
seaice=LIM2
nem_numproc=%NEMO_nproc%
nem_exe_file=${ECEARTH}/bin/nemo-${nem_grid}-${seaice}.exe
nem_time_step_sec=3600
lim_time_step_sec=3600
advsch=%ADVSCH%

#
# OASIS
#
oas_numproc=%OASIS_nproc%
oas_exe_file=${ECEARTH}/bin/oasis3.MPI1.x
cpl_freq_hrs=%RUN_coupFreq%
oas_namcut_script=${ECEARTH}/sources/util/namcouple-split/namsplit.pl

#
# COMMON
#
exp_name=$EXPID
export OASIS3=%OASIS3%
export OASIS3DEBUGLEVEL=2
export DR_HOOK_IGNORE_SIGNALS='-1'
export GRIB_DEFINITION_PATH=%GRIBAPIPATH2_DEF%
export GRIB_SAMPLES_PATH=%GRIBAPIPATH2_SAM%
export GRIB_BIN_PATH=%GRIBAPIPATH2%

#
# Chunk Management
#
chunk=%CHUNK%
Chunk_start_date=%Chunk_START_DATE%
Chunk_end_date=%Chunk_END_DATE%
Chunk_last=%Chunk_LAST%
leg_start_date_yyyymmdd=$Chunk_start_date
leg_start_date_yyyy=`echo $Chunk_start_date | cut -c1-4`
leg_end_date_yyyy=`echo $Chunk_end_date | cut -c1-4`
# In days
RUN_days=%RUN_DAYS%
# In hours
RUN_hours=$((RUN_days*24))
# Last Day Previous
day_prev=%PREV%
day_prev_rst=%day_prev_rst%
if [[ $day_prev_rst != '' ]]; then
 day_prev=$((day_prev_rst+day_prev))
fi
Chunk_last_day_prev=$((day_prev*24))
Chunk_end=$((Chunk_last_day_prev+RUN_hours))
# In seconds
leg_length_sec=$((RUN_hours*3600))
leg_start_sec=$((Chunk_last_day_prev*3600))
leg_end_sec=$((Chunk_end*3600))

#
# IFS climatology data
#
icmclfile=${ini_data_dir}/ifs/${ifs_grid}/climate/ICMCL
tempfile=tmp.$$

# Create data for december, the year before the leg starts
grib_set \
-s dataDate=$(printf "%04d" $((leg_start_date_yyyy-1)))1215 ${icmclfile}-12 \
                                                            ICMCL${EXPID}INIT

# Create data for all month in the years of the leg
for (( y=${leg_start_date_yyyy}; y<=${leg_end_date_yyyy}; y++ )); do
    yy=$(printf "%04d" $y)
    for m in $(seq 1 12); do
        mm=$(printf "%02d" $m)
        grib_set -s dataDate=${yy}${mm}15 ${icmclfile}-${mm} ${tempfile}
        cat ${tempfile} >> ICMCL${EXPID}INIT
    done
done

# Create data for january, the year after the leg ends
grib_set -s dataDate=$(printf "%04d" $((leg_end_date_yyyy+1)))0115 ${icmclfile}-01 \
                                                                          ${tempfile}
cat ${tempfile} >> ICMCL${EXPID}INIT

# Clean up
rm -f ${tempfile}

#
# Run Directory Initialization
# 
if [[ $chunk == 1 ]]; then
   echo "FIRST Chunk"
   echo "Chunk_length: ${RUN_hours}"
   leg_is_restart=false
else
   echo "Chunk: ${chunk}"
   echo "Chunk_length: ${RUN_hours}"
   leg_is_restart=true
   rm -f ${RUN_dir}/anaisout_*
   if [[ ! -d IFS_Restart_$((chunk-1)) && ! -d NEMO_Restart_$((chunk-1)) ]]; then
      rm finished_chunk_${chunk}
      # adopt some mechanism to copy respective restart
      # files if available at permanent storage.
      # Even if not available at permanent storage then exit
      # with the following message.
      echo "respective restart files does not exist ????"
      exit 1
   fi
   ln -sf IFS_Restart_$((chunk-1))/* .
   rm -f rcf; cp IFS_Restart_$((chunk-1))/rcf .
   ns=$(printf %08d $(( leg_start_sec / nem_time_step_sec )))
   for n in $(seq 0 $((nem_numproc-1))); do
       np=$(printf %04d ${n})
       ln -sf NEMO_Restart_$((chunk-1))/${EXPID}_${ns}_restart_${np}.nc restart_${np}.nc
       ln -sf NEMO_Restart_$((chunk-1))/${EXPID}_${ns}_restart_ice_${np}.nc restart_ice_in_${np}.nc
   done
fi

if [[ ! -a finished_chunk_${chunk} ]]; then

   # IFS, NEMO, LIM namelist and OASIS namcouple files
  . ${ctrl_file_dir}/namelist.ifs.sh   > fort.4
  . ${ctrl_file_dir}/namelist.lim2.sh  > namelist_ice
  . ${ctrl_file_dir}/namcouple.sh      > namcouple

  case ${nem_grid} in
          ORCA1L46)   . ${ctrl_file_dir}/namelist.nemo-orca1.sh    > namelist
                      ;;
          ORCA025L46) . ${ctrl_file_dir}/namelist.nemo-orca025.sh  > namelist
                      ;;
          *)          error "Unsupported grid type: ${nem_grid}"
                      ;;
  esac

  # Split OASIS namcouple file (if necessary)
  if (( oas_numproc == 1 )); then
     ln -sf namcouple namcouple_0
  elif [ -n "$oas_namcut_script" -a -x $oas_namcut_script ]; then
     ${oas_namcut_script} ${oas_numproc} namcouple
  else
     error "Couldn't run script to split the OASIS namcouple file (\$oas_namcut_script)."
  fi

   ls -l

   #
   # Location of the executables
   # 
   ln -sf ${ifs_exe_file}
   ln -sf ${nem_exe_file}
   ln -sf ${oas_exe_file}
   %PARALLEL_RUN_ECEARTH3%

   date
fi

#
# Check either simulation completed successfully or not
#
Chunk_restart_tag=`printf "%06d0000" $(( Chunk_end / 24 ))`

ls -1 *${Chunk_restart_tag}*
if [[ $? == 0 ]]; then
   echo "finished chunk"
   touch finished_chunk_${chunk}
else
   echo "failed chunk"
   exit 1
fi

#
# Save NEMO & IFS restart files
#
mkdir -p NEMO_Restart_${chunk}

ldp=`printf '%08d' $Chunk_end`
mv *${ldp}* NEMO_Restart_${chunk}
rm -f restart_*

mkdir -p IFS_Restart_${chunk}

mv *${Chunk_restart_tag}* \
   rcf IFS_Restart_${chunk}
rm -f srf*

#
# Delete NEMO & IFS restart files (which has been stored correctly)
#

if [[ -a rest_$((chunk-2)) && -d NEMO_Restart_$((chunk-2)) ]]; then
 rm -rf NEMO_Restart_$((chunk-2))
fi

if [[ -a rest_$((chunk-2)) && -d IFS_Restart_$((chunk-2)) ]]; then
 rm -rf IFS_Restart_$((chunk-2))
fi

#
# Save NEMO & IFS output for postprocessing
#
output_dir=${RUN_dir}/Output_${chunk}
mkdir -p $output_dir

mv ${EXPID}_??_*.nc ICMGG${EXPID}+* ICMSH${EXPID}+* $output_dir

chmod 775 -R NEMO_Restart_${chunk} IFS_Restart_${chunk} $output_dir

touch %SCRATCH_DIR%/%HPCUSER%/%EXPID%/LOG_%EXPID%/%JOBNAME%_COMPLETED

date

