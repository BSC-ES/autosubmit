# Copyright 2015-2025 Earth Sciences Department, BSC-CNS
#
# This file is part of Autosubmit.
#
# Autosubmit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Autosubmit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Autosubmit.  If not, see <http://www.gnu.org/licenses/>.

from test.unit.performance.utils import Utils
import pytest
from autosubmit.job.job import Job
from autosubmit.performance.type_job.SIM.SIM_performance import SIMPerformance


class TestPerformanceMetricsNaive:
    """
    Test class for performance metrics calculations, check threshold and send mail.
    """

    def test_check_and_compute_performance_metrics(self, mocker, naive_job: Job, sim_performance: SIMPerformance, mock_smtp, utils: Utils):
        """
        Test the performance metrics calculations for a naive job.
        Check if the metrics are under the threshold and if the mail is sent.
        """
        expected_mail_to = ["test@gmail.com"]
        expected_subject = f"[Autosubmit] Performance Alert for Job: {naive_job.name}"

        expected_sypd = sim_performance.compute_sypd_from_job(
            naive_job
        )
        expected_threshold = sim_performance.SYPD_THRESHOLD
        expected_under_performance = utils.get_under_performance(
            expected_sypd, expected_threshold
        )

        message_parts = ["üö® Performance Alert\n===================\n"]

        metric_template = f"""
        üß™ Experiment ID: {naive_job.expid}
        üéØ Job Name: {naive_job.name}

        Metric: SYPD
        üìâ Current Value: {expected_sypd:.4f}
        üéöÔ∏è Expected Threshold: {expected_threshold}

        üîç Performance is {expected_under_performance:.1f}% below expected threshold.
        """

        message_parts.append(metric_template)
        message_parts.append("\n‚ÑπÔ∏è This notification was auto-generated by Autosubmit.")

        expected_message = "\n".join(message_parts)

        mock_get_mail_recipients = mocker.patch.object(
            sim_performance,
            "_get_mail_recipients",
            return_value=expected_mail_to,
        )

        mock_notify_custom_alert = mocker.patch.object(
            sim_performance._mail_notifier, "notify_custom_alert"
        )

        sim_performance.compute_and_check_performance_metrics(
            naive_job
        )

        mock_get_mail_recipients.assert_called_once()

        mock_notify_custom_alert.assert_called_once()

        call_args = mock_notify_custom_alert.call_args
        subject, mail_to, message = call_args[0]

        assert expected_subject == subject, f"Unexpected subject: {subject}"
        assert expected_mail_to == mail_to, f"Unexpected mail_to: {mail_to}"
        assert expected_message == message, f"Unexpected message: {message}"
