%ENVCOM3%
set -xuve
date

#
# General Paths
#
MODEL_DIR=%MODELS_DIR%/%MODEL%
SCRATCH_DIR=%SCRATCH_DIR%/%HPCPROJ%/%HPCUSER%
SCRATCH_TMP_DIR=%SCRATCH_TMP_DIR%/%HPCUSER%/%JOBNAME%
HSM_DIR=%HSM_DIR%

#
# Model Configuration
#
EXPID=%EXPID%
VERSION=%VERSION%
MEMBER=%MEMBER%
START_date=%SDATE%
START_date_1=%DAY_BEFORE%

ECEARTH=${MODEL_DIR}/$VERSION
ini_data_dir=${ECEARTH}/inidata

WRITINGDIR=${SCRATCH_DIR}/${EXPID}
RUN_dir=${WRITINGDIR}/${START_date}/${MEMBER}

BINPATH=${WRITINGDIR}/model/bin
ctrl_file_dir=${WRITINGDIR}/model/setup/ctrl

cd $RUN_dir

#
# IFS
#
ifs_grid=%IFS_resolution%
ifs_grid_wol=$(echo ${ifs_grid} | cut -d 'L' -f 1) # without level (wol)
ifs_numproc=%IFS_nproc%
ifs_exe_file=${BINPATH}/ifsmaster-ecconf
nfrp=%NFRP%
case ${ifs_grid_wol} in
     T159) ifs_time_step_sec=3600 ;;
     T255) ifs_time_step_sec=2700 ;;
     T799) ifs_time_step_sec=720  ;;
     *) echo "Unsupported grid type: ${ifs_grid_wol}" ;;
esac
ifs_output_freq=$(( nfrp * 3600 / ifs_time_step_sec ))
ifs_di_freq=$(( 24 * 3600 / ifs_time_step_sec ))
ifs_ddh_freq=$(( 120 * 3600 / ifs_time_step_sec ))
ifs_lastout=true
ifs_res_hor=$(echo ${ifs_grid} | sed 's:T\([0-9]*\)L\([0-9]*\):\1:')
ifs_res_ver=$(echo ${ifs_grid} | sed 's:T\([0-9]*\)L\([0-9]*\):\2:')
ifs_cmip5=%LCMIP5%
ifs_cmip5_rcp=%NRCP%
ifs_volcanoes=%LHVOLCA%
ifs_ncmip5fixyr=%NFIXYR%

# Selection
case $VERSION in
 v3.0) nprtrv=%NPRTRVIFS% ;;
 *) echo "nprtrv is no more needed" ;;
esac

#
# COMMON
#
exp_name=$EXPID
cpl_freq_hrs=0
export OASIS3=%OASIS3%
export OASIS3DEBUGLEVEL=3
export DR_HOOK_IGNORE_SIGNALS='-1'
export GRIB_DEFINITION_PATH=%GRIBAPIPATH2_DEF%
export GRIB_SAMPLES_PATH=%GRIBAPIPATH2_SAM%
export GRIB_BIN_PATH=%GRIBAPIPATH2%

#
# Chunk Management
#
chunk=%CHUNK%
Chunk_start_date=%Chunk_START_DATE%
Chunk_end_date=%Chunk_END_DATE%
Chunk_last=%Chunk_LAST%
leg_start_date_yyyymmdd=$Chunk_start_date
leg_start_date_yyyy=$(echo $Chunk_start_date | cut -c1-4)
leg_end_date_yyyy=$(echo $Chunk_end_date | cut -c1-4)
# In months
RUN_months=%CHUNKSIZE%
# In days
RUN_days=%RUN_DAYS%
# In hours
RUN_hours=$((RUN_days*24))
# Last Day Previous
day_prev=%PREV%
Chunk_last_day_prev=$((day_prev*24))
Chunk_end=$((Chunk_last_day_prev+RUN_hours))
# In seconds
leg_length_sec=$((RUN_hours*3600))
leg_start_sec=$((Chunk_last_day_prev*3600))
leg_end_sec=$((Chunk_end*3600))
# restart tags
Chunk_ifs_restart_tag=$(printf %06d0000 $(( Chunk_end / 24 )))

#
# Run Directory Initialization
# 
if [[ $chunk == 1 ]]; then
   echo "FIRST Chunk"
   echo "Chunk_length: ${RUN_hours}"
   leg_is_restart=false
   rm -f ${RUN_dir}/anaisout_*

   # Files needed for IFS (linked)
   # Other stuff
   # Output control (ppt files)
   mkdir -p postins
   cp ${ctrl_file_dir}/ppt* postins/
   f_min=$(( ifs_output_freq * ifs_time_step_sec / 60 ))
   for t in $(seq $f_min $f_min 1439);do
       hh=$(printf %02d $((t/60)) )
       mm=$(printf %02d $((t%60)) )
       case $VERSION in
        v3.0)
         ln -sf ppt0000000000 postins/ppt00000000
         ln -sf pptdddddd0000 postins/pptdddd0000
         ln -sf pptdddddd0000 postins/pptdddd$hh$mm
        ;;
        *)
         ln -sf pptdddddd0000 postins/pptdddddd$hh$mm
        ;;
       esac
   done
   ls -1 postins/* > dirlist
   ln -sf ${ini_data_dir}/ifs/rtables/* .

   # Run-off file
   ln -sf ${ini_data_dir}/ifs/${ifs_grid}/runoff_maps.txt

   # Files needed for common use from local inidata
   ln -sf inidata/* .
   if [[ -a inidata/rcf ]]; then
      rm -f rcf; cp inidata/rcf .
   fi

else
   echo "Chunk: ${chunk}"
   echo "Chunk_length: ${RUN_hours}"
   leg_is_restart=true
   rm -f ${RUN_dir}/anaisout_*
   ln -sf IFS_Restart_$((chunk-1))/* .
   rm -f rcf; cp IFS_Restart_$((chunk-1))/rcf .
fi

#
# Control the use of the scenario
#
if [[ $(echo $Chunk_start_date | cut -c1-4) < 2006 ]] ; then
   ifs_cmip5_rcp=0
fi
#

#
# Final condition, before starting simulation
#
if [[ ! -a finished_chunk_${chunk} ]]; then

 rm -rf IFS_Restart_${chunk} *${Chunk_ifs_restart_tag}*
 rm -rf Output_${chunk}
 rm -f rest_${chunk} out_${chunk}
 if [[ -a NODE.001_01 ]]; then
    mv NODE.001_01 NODE.001_01.$((chunk-1)).$$
 fi

 # Create some control files

 # IFS namelist file
 . ${ctrl_file_dir}/namelist.ifs-${ifs_grid}.sh > fort.4

 # IFS climatology data
 icmclfile=${ini_data_dir}/ifs/${ifs_grid}/climate/ICMCL
 tempfile=tmp.$$

 # Create data for december, the year before the leg starts
 grib_set \
 -s dataDate=$(printf "%04d" $((leg_start_date_yyyy-1)))1215 ${icmclfile}-12 \
                                                        ICMCL${exp_name}INIT

 # Create data for all month in the years of the leg
 for y in $(seq ${leg_start_date_yyyy} ${leg_end_date_yyyy})
 do
     yy=$(printf "%04d" $y)
     for m in $(seq 1 12)
     do
         mm=$(printf "%02d" $m)
         grib_set -s dataDate=${yy}${mm}15 ${icmclfile}-${mm} ${tempfile}
         cat ${tempfile} >> ICMCL${exp_name}INIT
     done
 done

 # Create data for january, the year after the leg ends
 grib_set -s dataDate=$(printf "%04d" $((leg_end_date_yyyy+1)))0115 ${icmclfile}-01 \
                                                                          ${tempfile}
 cat ${tempfile} >> ICMCL${exp_name}INIT

 # Clean up
 rm -f ${tempfile}

 ln -sf ${ini_data_dir}/ifs/${ifs_grid}/climate/ICMSEAECE3INIT ICMSEA${exp_name}INIT

 # Location of the executables
 ln -sf ${ifs_exe_file}

 # Model Run
 ls -l
 date
%ENVPARA3%
%RUNPARAIFS3%

 date
 ls -l
fi

#
# Check either simulation completed successfully or not
#
ls -1 *${Chunk_ifs_restart_tag}*
if [[ $? -ne 0 ]]; then
   echo "failed chunk"
   exit 1
fi
echo "finished chunk"
touch finished_chunk_${chunk}

#
# Save IFS restart files
#
mkdir -p IFS_Restart_${chunk}
mv *${Chunk_ifs_restart_tag}* \
   rcf IFS_Restart_${chunk}
rm -f srf*

#
# Delete IFS restart files (which has been stored correctly)
#
if [[ -a rest_$((chunk-2)) && -d IFS_Restart_$((chunk-2)) ]]; then
 rm -rf IFS_Restart_$((chunk-2))
fi

#
# Save IFS output for postprocessing
#
mkdir -p Output_${chunk}
mv ICMGG${EXPID}+* ICMSH${EXPID}+* Output_${chunk}

touch %SCRATCH_DIR%/%HPCPROJ%/%HPCUSER%/%EXPID%/LOG_%EXPID%/%JOBNAME%_COMPLETED

date

