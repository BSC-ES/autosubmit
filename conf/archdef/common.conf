# Autosubmit HEADER for remote jobs
AS-HEADER-REM=
 # autosubmit header
 set -xuve
 job_name_ptrn=%%SCRATCH_DIR%%/%%HPCPROJ%%/%%HPCUSER%%/%%EXPID%%/LOG_%%EXPID%%/%%JOBNAME%%
 job_cmd_stamp=$(stat -c %%Z $job_name_ptrn.cmd)
 job_start_time=$(date +%%s)
 job_queue_time=$((job_start_time - job_cmd_stamp))

# Autosubmit TAILER for remote jobs
AS-TAILER-REM=
 # autosubmit tailer
 job_end_time=$(date +%%s)
 job_run_time=$((job_end_time - job_start_time))
 case %%HPCARCH%% in
  ithaca)       errfile_created="TRUE"; errfile_ptrn="\.e" ;;
  marenostrum)  errfile_created="TRUE"; errfile_ptrn="\.err" ;;
  marenostrum3) errfile_created="TRUE"; errfile_ptrn="\.err" ;;
  ecmwf)        errfile_created="TRUE"; errfile_ptrn="\.err" ;;
  hector)       errfile_created="FALSE"; errfile_ptrn="\.e" ;;
  lindgren)     errfile_created="FALSE"; errfile_ptrn="\.e" ;;
  jaguar)       errfile_created="FALSE"; errfile_ptrn="\.e" ;;
  archer)       errfile_created="FALSE"; errfile_ptrn="\.e" ;;
  *) echo "!!! %%HPCARCH%% is not valid platform !!!"; exit 1 ;;
 esac
 failed_jobs=0; failed_errfiles=""
 set +e; ls -1 ${job_name_ptrn}* | grep $errfile_ptrn
 if [[ $? -eq 0 ]]; then
  case $errfile_created in 
   TRUE)
    failed_jobs=$(($(ls -1 ${job_name_ptrn}* | grep $errfile_ptrn | wc -l) - 1))
    failed_errfiles=$(ls -1 ${job_name_ptrn}* | grep $errfile_ptrn | head -n $failed_jobs)
   ;;
   FALSE)
    failed_jobs=$(ls -1 ${job_name_ptrn}* | grep $errfile_ptrn | wc -l)
    failed_errfiles=$(ls -1 ${job_name_ptrn}* | grep $errfile_ptrn)
   ;;
   *) "!!! $errfile_created is not valid errfile_created option !!!"; exit 1 ;;
  esac
 fi; set -e
 failed_jobs_qt=0; failed_jobs_rt=0
 for failed_errfile in $failed_errfiles; do
  failed_errfile_stamp=$(stat -c %%Z $failed_errfile)
  failed_jobs_qt=$((failed_jobs_qt + $(grep "job_queue_time=" $failed_errfile | head -n 2 | tail -n 1 | cut -d '=' -f 2)))
  failed_jobs_rt=$((failed_jobs_rt + $((failed_errfile_stamp - $(grep "job_start_time=" $failed_errfile | head -n 2 | tail -n 1 | cut -d '=' -f 2)))))
 done
 echo "$job_end_time $job_queue_time $job_run_time $failed_jobs $failed_jobs_qt $failed_jobs_rt" > ${job_name_ptrn}_COMPLETED

# Autosubmit HEADER for local jobs
AS-HEADER-LOC=
 # autosubmit header
 set -xuve
 job_name_ptrn=/cfu/autosubmit/%%EXPID%%/tmp/LOG_%%EXPID%%/%%JOBNAME%%
 job_cmd_stamp=$(stat -c %%Z $job_name_ptrn.cmd)
 job_start_time=$(date +%%s)

# Autosubmit TAILER for local jobs
AS-TAILER-LOC=
 # autosubmit tailer
 job_end_time=$(date +%%s)
 job_run_time=$((job_end_time - job_start_time))
 errfile_ptrn="\.e"
 failed_jobs=0
 set +e; ls -1 ${job_name_ptrn}* | grep $errfile_ptrn
 if [[ $? -eq 0 ]]; then
  failed_jobs=$(($(ls -1 ${job_name_ptrn}* | grep $errfile_ptrn | wc -l) - 1))
  failed_errfiles=$(ls -1 ${job_name_ptrn}* | grep $errfile_ptrn | head -n $failed_jobs)
 fi; set -e
 failed_jobs_rt=0
 for failed_errfile in $failed_errfiles; do
  failed_errfile_stamp=$(stat -c %%Z $failed_errfile)
  failed_jobs_rt=$((failed_jobs_rt + $((failed_errfile_stamp - $(grep "job_start_time=" $failed_errfile | head -n 2 | tail -n 1 | cut -d '=' -f 2)))))
 done
 echo "$job_end_time 0 $job_run_time $failed_jobs 0 $failed_jobs_rt" > ${job_name_ptrn}_COMPLETED
