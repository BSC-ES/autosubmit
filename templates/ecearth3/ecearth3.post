%ENVCOM3%
set -xuve
date

#
# General Paths
#
MODEL_DIR=%MODELS_DIR%/%MODEL%
SCRATCH_DIR=%SCRATCH_DIR%/%HPCPROJ%/%HPCUSER%
SCRATCH_TMP_DIR=%SCRATCH_TMP_DIR%/%HPCUSER%/%JOBNAME%
HSM_DIR=%HSM_DIR%

#
# Model Configuration
#
EXPID=%EXPID%
VERSION=%VERSION%
MEMBER=%MEMBER%
START_date=%SDATE%
START_date_1=%DAY_BEFORE%

ECEARTH=${MODEL_DIR}/$VERSION
ini_data_dir=${ECEARTH}/inidata

WRITINGDIR=${SCRATCH_DIR}/${EXPID}
RUN_dir=${WRITINGDIR}/${START_date}/${MEMBER}

nem_grid=%NEMO_resolution%
nem_grid_wol=$(echo ${nem_grid} | cut -d 'L' -f 1) # without level (wol)


CON_FILES=${MODEL_DIR}/datcom/v3/inidata/nemo/%NEMO_resolution%
NEMOVERSION=v3

#
# Chunk Management
#
chunk=%CHUNK%
Chunk_start_date=%Chunk_START_DATE%
Chunk_end_date=%Chunk_END_DATE%
Chunk_last=%Chunk_LAST%
# In months
RUN_months=%CHUNKSIZE%
# In days
RUN_days=%RUN_DAYS%
# In hours
RUN_hours=$((RUN_days*24))
# Last Day Previous
if [[ $chunk == 1 ]]; then
  day_prev=0
else
  day_prev=%PREV%
fi
Chunk_last_day_prev=$((day_prev*24))
Chunk_end=$((Chunk_last_day_prev+RUN_hours))
# In seconds
leg_end_sec=$((Chunk_end*3600))
# restart tags
case ${nem_grid_wol} in
     ORCA1)   nem_time_step_sec=3600 ;;
     ORCA025) nem_time_step_sec=1200 ;;
     *) echo "Unsupported grid type: ${nem_grid_wol}" ;;
esac
Chunk_nem_restart_tag=$(printf %08d $(( leg_end_sec / nem_time_step_sec )))

#
# Model output path w.r.t chunk number
#
output_dir=${RUN_dir}/Output_${chunk}
if [[ ! -d ${output_dir} ]]; then
   exit
fi
nemo_restart_dir=${RUN_dir}/NEMO_Restart_${chunk}
if [[ ! -d ${nemo_restart_dir} ]]; then
   exit
fi
#
# Deal with Ocean's output
#
# special function for rebuilding nemo output to overcome memory requirements
function rebuild_nemo_special {
output_file=$1
nem_numproc=$2
rm -rf ${output_file}_tmp_*

for n in $(seq 0 $((nem_numproc-1))); do
    nn=$(printf "%04d" ${n})
    f="${output_file}_${nn}"
    times=$(cdo ntime $f.nc | head -n 1)
    for t in $(seq 0 $((times-1))); do
        nt=$(printf "%06d" ${t})
        tmp="${output_file}_tmp_${nt}_${nn}"
        ncks -O -h -a -d time_counter,$t $f.nc $tmp.nc
        ncdump $tmp.nc > $tmp.txt
        head -n 4 $tmp.txt > head
        sed '1,4d' $tmp.txt > last
        tail -n 2 head | sort > prob
        head -n 2 head > fix
        cat fix prob > head
        cat head last > $tmp.txt
        ncgen $tmp.txt -o $tmp.nc
        rm -f head fix prob last $tmp.txt
    done
done

for t in $(seq 0 $((times-1))); do
    nt=$(printf "%06d" ${t})
    rebuild_nemo ${output_file}_tmp_${nt} $nem_numproc
    rm -rf ${output_file}_tmp_${nt}_????.nc
done

ncrcat -O -h ${output_file}_tmp_??????.nc $output_file.nc
rm -rf ${output_file}_tmp_??????.nc
}

# Rebuild
cd $output_dir
if [[ ! -a $output_dir/%JOBNAME%.rebuild ]]; then
   intervals=`ls -1 ${EXPID}_??_${Chunk_start_date}_${Chunk_end_date}_??????_0000.nc | cut -d '_' -f 2 | uniq`
   for interval in ${intervals}; do
       grid_types=`ls -1 ${EXPID}_${interval}_${Chunk_start_date}_${Chunk_end_date}_??????_0000.nc | cut -c 27-32`
       prefix=${EXPID}_${interval}_${Chunk_start_date}_${Chunk_end_date}
       for grid_type in ${grid_types}; do
           input_files=${prefix}_${grid_type}_[0-9][0-9][0-9][0-9].nc
           output_file=${prefix}_${grid_type}
           if [[ $interval == "1d" ]]; then
              rebuild_nemo $output_file %NEMO_nproc%
              # rebuild_nemo_special $output_file %NEMO_nproc%
           else
              rebuild_nemo $output_file %NEMO_nproc%
           fi
           rm -f $input_files
       done
   done
   touch $output_dir/%JOBNAME%.rebuild
fi

if [[ %OCEAN_ALLRST% == 'TRUE' ]]; then
  cd $nemo_restart_dir 
  if [[ ! -a $nemo_restart_dir/%JOBNAME%.rebuild ]]; then
   grid_types="restart_ice restart_oce"
   prefix=${EXPID}_${Chunk_nem_restart_tag}
   for grid_type in ${grid_types}; do
     input_files=${prefix}_${grid_type}_[0-9][0-9][0-9][0-9].nc
     output_file=${EXPID}_${MEMBER}_${Chunk_end_date}_${grid_type}.nc
     rebuild_nemo ${prefix}_${grid_type} %NEMO_nproc%
     mv ${prefix}_${grid_type}.nc $output_file
     rm -f $input_files
   done
   touch $nemo_restart_dir/%JOBNAME%.rebuild
  fi
fi

# Select a reduced set of outputs to save
# Include ocean post processing functions
cd $output_dir
%INCLUDE_POSTP%
if [[ ! -a $output_dir/%JOBNAME%.opost ]]; then
   OCEAN_REDUCOUT=%OCEAN_REDUCOUT%
   if [[ $OCEAN_REDUCOUT == TRUE ]]; then
      if [[ ! -a $output_dir/%JOBNAME%.oreduced ]]; then
         #
         # A prerequisite to enter the common diagnostic post-processing
         if [[ -e toto.nc ]]; then
            rm -f toto.nc heat_sal_mxl.nc ohc_2d_avg_0-300m.nc
         fi
         cdo mergetime ${EXPID}_1d_${Chunk_start_date}_${Chunk_end_date}_grid_T.nc toto.nc
         #
         # Mixed layer ocean heat content: somxlheatc
         heat_sal_mxl toto.nc heat_sal_mxl.nc
         ncrename -d time,time_counter heat_sal_mxl.nc
         #
         # 0-300m ocean heat content: heatc_sl
         ohc_specified_layer toto.nc 0.0 300.0 ohc_2d_avg_0-300m.nc
         ncrename -d time,time_counter ohc_2d_avg_0-300m.nc
         #
         touch $output_dir/%JOBNAME%.oreduced
      fi
      #
      # Append reduced stuff, select surface currents, remove 3D temperature and rename a few variables
      ncks -A -v somxlheatc heat_sal_mxl.nc ${EXPID}_1d_${Chunk_start_date}_${Chunk_end_date}_grid_T.nc
      ncks -A -v heatc_sl ohc_2d_avg_0-300m.nc ${EXPID}_1d_${Chunk_start_date}_${Chunk_end_date}_grid_T.nc
      ncks -O -d depthv,0 -d depthu,0 -x -v sohtc300 -x -v votemper \
      ${EXPID}_1d_${Chunk_start_date}_${Chunk_end_date}_grid_T.nc ${EXPID}_1d_${Chunk_start_date}_${Chunk_end_date}_grid_T.nc
      ncrename -v vozocrtx,sozocrtx -v vomecrty,somecrty ${EXPID}_1d_${Chunk_start_date}_${Chunk_end_date}_grid_T.nc
      rm -f toto.nc heat_sal_mxl.nc ohc_2d_avg_0-300m.nc
   fi
   gzip -9 ${EXPID}_??_${Chunk_start_date}_${Chunk_end_date}_??????.nc
   touch $output_dir/%JOBNAME%.opost
fi

#
# Deal with Atmosphere's output
#
cd $output_dir
if [[ ! -a $output_dir/%JOBNAME%.apost ]]; then
 ATM_rstdate=%ATM_rstdate%
 if [[ $ATM_rstdate == '' ]]; then
    ATM_rstdate=${START_date}
 fi
 nmonthini=`echo $ATM_rstdate | cut -c5-6`
 nyearini=`echo $ATM_rstdate | cut -c1-4`
 nmon=1
 year=${nyearini}
 while [[ $nmon -le $RUN_months ]]; do
       date
       nmonthini=${nmonthini#0}
       month=$((nmonthini+(chunk-1)*RUN_months+nmon-1))
       year=$((nyearini+((month-1)/12)))
       month=$((month-((month-1)/12)*12))
       month=`printf '%02d' ${month}`
       types="SH GG"
       for type in $types; do
           prefix=ICM${type}${EXPID}
           file=${prefix}+${year}${month}
           if [[ ! -a ${file}.grb ]]; then
              echo write \"${file}_[param].grb\"\; > rules_file
              grib_filter rules_file ${file}
              case $type in # list of params, don't need!!
               SH) params="152.128" ;;
               GG) params="152.128" ;;
              esac
              for param in ${params}; do
                  rm -f ${file}_${param}.grb
              done
              for gf in `ls ${file}_*.grb`; do
                  cdo -R -r -t ecmwf -f nc splitvar ${gf} ${file}_
                  rm -f ${gf}
              done
              ls -l ${file}_*.nc
              #
              date
              for infile in `ls ${file}_*.nc`; do
                  name=`basename $infile .nc`
                  quant=`echo $name | sed s/${prefix}+${year}${month}_//`
                  outfile=IM_${quant}_${year}${month}
                  # Needed because last timestep is the 00:00 hours of the next day of the month
                  cdo -f nc -r -timmean ${prefix}+${year}${month}_${quant}.nc ${outfile}_mm.nc
                  mv ${outfile}_mm.nc ${outfile}_mm.nc.tmp
                  # Shift the time to the correct month
                  cdo shifttime,-1month ${outfile}_mm.nc.tmp ${outfile}_mm.nc
                  rm -f ${prefix}+${year}${month}_${quant}.nc
              done
              cdo -f nc -r -merge IM_*_${year}${month}_mm.nc MMA_${EXPID}_${type}_${year}${month}.nc
              gzip -9 MMA_${EXPID}_${type}_${year}${month}.nc
              rm -f IM_*_${year}${month}_mm.nc*
              mv $file ${file}.grb
           fi
       done
       nmon=$((nmon+1))
 done

 touch $output_dir/%JOBNAME%.apost
fi

if [[ -a $output_dir/%JOBNAME%.opost && -a $output_dir/%JOBNAME%.apost ]]; then
   touch %SCRATCH_DIR%/%HPCPROJ%/%HPCUSER%/%EXPID%/LOG_%EXPID%/%JOBNAME%_COMPLETED
fi

date

